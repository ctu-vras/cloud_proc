#!/usr/bin/env python
"""
Point cloud box filter with custom filter and target frames.
"""
from __future__ import absolute_import, division, print_function
import numpy as np
import rospy
from ros_numpy import msgify, numpify
from sensor_msgs.msg import PointCloud2
from tf2_py import TransformException
from tf2_ros import Buffer, TransformListener
from timeit import default_timer as timer


class BoxFilterNode(object):

    def __init__(self):
        rospy.init_node('box_filter')

        self.box_frame = rospy.get_param('~box_frame', 'laser')
        self.target_frame = rospy.get_param('~target_frame', 'map')
        self.fixed_frame = rospy.get_param('~fixed_frame', 'map')
        self.fields = rospy.get_param('~fields', ['x', 'y', 'z'])
        self.min = rospy.get_param('~min', [-10.0, -10.0, -10.0])
        self.min = np.array(self.min)[:, None]
        self.max = rospy.get_param('~max', [10.0, 10.0, 10.0])
        self.max = np.array(self.max)[:, None]
        self.tf_timeout = rospy.Duration(rospy.get_param('~tf_timeout', 0.1))
        self.last_stamp = rospy.Time()
        self.max_age = rospy.Duration(rospy.get_param('~max_age', 1.0))
        self.log_config()

        self.tf = Buffer()
        self.tf_sub = TransformListener(self.tf)

        self.cloud_pub = rospy.Publisher('out', PointCloud2, queue_size=2)
        self.cloud_sub = rospy.Subscriber('in', PointCloud2, self.cloud_cb, queue_size=2)

    def log_config(self):
        rospy.loginfo('Box frame (to apply filter in): %s', self.box_frame)
        rospy.loginfo('Target frame (to transform to after filtering): %s', self.target_frame)
        rospy.loginfo('Fixed frame (to use when transforming): %s', self.fixed_frame)
        rospy.loginfo('Filter fields (in box frame): %s', self.fields)
        rospy.loginfo('Box minimum (in box frame): %s', self.min.ravel().tolist())
        rospy.loginfo('Box maximum (in box frame): %s', self.max.ravel().tolist())

    def cloud_cb(self, msg):
        t0 = timer()
        # Keep the original stamp, avoid updating it in transform_full.
        stamp = msg.header.stamp
        age = rospy.Time.now() - stamp
        if age > self.max_age:
            rospy.loginfo('Discarding old message (%.3f s).', age.to_sec())
            return

        try:
            cloud = numpify(msg)
            x = np.stack([cloud[f].ravel() for f in self.fields])
            # Transform the cloud into filter frame.
            tf = self.tf.lookup_transform_full(self.box_frame, msg.header.stamp,
                                               msg.header.frame_id, msg.header.stamp,
                                               self.fixed_frame, self.tf_timeout)
            T = numpify(tf.transform)
            R, t = T[:3, :3], T[:3, 3:]
            x = np.matmul(R, x) + t
            # Keep points inside the box.
            n0 = cloud.size
            keep = ((x >= self.min) & (x <= self.max)).all(axis=0)
            x = x[:, keep]
            cloud = cloud[keep]
            n1 = cloud.size
            # Transform the cloud into target frame.
            tf = self.tf.lookup_transform_full(self.target_frame, msg.header.stamp,
                                               self.box_frame, msg.header.stamp,
                                               self.fixed_frame, self.tf_timeout)
            T = numpify(tf.transform)
            R, t = T[:3, :3], T[:3, 3:]
            x = np.matmul(R, x) + t
            for i, f in enumerate(self.fields):
                cloud[f] = x[i, :]
            # Create and publish message with filtered cloud.
            msg = msgify(PointCloud2, cloud)
            msg.header.frame_id = self.target_frame
            msg.header.stamp = stamp
            self.cloud_pub.publish(msg)
            rospy.loginfo('Cloud filtered: %i points from %i kept (%.3f s).', n1, n0, timer() - t0)
        except TransformException as ex:
            rospy.logerr(ex.message)


if __name__ == '__main__':
    node = BoxFilterNode()
    rospy.spin()
