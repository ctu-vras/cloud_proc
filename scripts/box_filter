#!/usr/bin/env python
"""
Point cloud box filter with custom filter and target frames.

TODO: Output all fields, not only the filtering ones.
TODO: Use structured numpy arrays for retaining all fields and further speed up..
"""
from __future__ import absolute_import, division, print_function
from copy import copy
import numpy as np
import rospy
from sensor_msgs.msg import PointCloud2
from sensor_msgs.point_cloud2 import create_cloud_xyz32, read_points
from tf.transformations import quaternion_matrix
from tf2_py import TransformException
from tf2_ros import Buffer, TransformListener
# Needed for tf2_ros.Buffer.transform(cloud)
from tf2_sensor_msgs.tf2_sensor_msgs import do_transform_cloud
from timeit import default_timer as timer


def slots(msg):
    return [getattr(msg, var) for var in msg.__slots__]


def array(msg):
    return np.array(slots(msg))


def wxyz(xyzw):
    shape = xyzw.shape
    xyzw = xyzw.ravel()
    return np.array([xyzw[3], xyzw[0], xyzw[1], xyzw[2]]).reshape(shape)


def filter_box(x, min, max):
    idx = ((x >= min) & (x <= max)).all(axis=1, keepdims=False)
    return x[idx, :]


def se3_from_tf(tf):
    q = wxyz(array(tf.transform.rotation))
    R = quaternion_matrix(q)[:3, :3]
    t = array(tf.transform.translation)
    return R, t


class BoxFilterNode(object):

    def __init__(self):
        rospy.init_node('box_filter')

        self.box_frame = rospy.get_param('~box_frame', 'laser')
        self.target_frame = rospy.get_param('~target_frame', 'map')
        self.fixed_frame = rospy.get_param('~fixed_frame', 'map')
        self.fields = rospy.get_param('~fields', ['x', 'y', 'z'])
        self.min = rospy.get_param('~min', [-10.0, -10.0, -10.0])
        self.min = np.array(self.min)[None, :]
        self.max = rospy.get_param('~max', [10.0, 10.0, 10.0])
        self.max = np.array(self.max)[None, :]
        self.tf_timeout = rospy.Duration(rospy.get_param('~tf_timeout', 0.1))
        self.last_stamp = rospy.Time()
        self.max_age = rospy.Duration(rospy.get_param('~max_age', 1.0))
        self.log_config()

        self.tf = Buffer()
        self.tf_sub = TransformListener(self.tf)

        self.cloud_pub = rospy.Publisher('out', PointCloud2, queue_size=2)
        self.cloud_sub = rospy.Subscriber('in', PointCloud2, self.cloud_cb, queue_size=2)

    def log_config(self):
        rospy.loginfo('Box frame (to apply filter in): %s', self.box_frame)
        rospy.loginfo('Target frame (to transform to after filtering): %s', self.target_frame)
        rospy.loginfo('Fixed frame (to use when transforming): %s', self.fixed_frame)
        rospy.loginfo('Filter fields (in box frame): %s', self.fields)
        rospy.loginfo('Box minimum (in box frame): %s', self.min)
        rospy.loginfo('Box maximum (in box frame): %s', self.max)

    def cloud_cb(self, msg):
        t0 = timer()
        # Keep the original stamp, avoid updating it in transform_full.
        stamp = msg.header.stamp
        age = rospy.Time.now() - stamp
        if age > self.max_age:
            rospy.loginfo('Discarding old message (%.3f s).', age.to_sec())
            return

        try:
            msg = self.tf.transform_full(msg, self.box_frame, stamp, self.fixed_frame, self.tf_timeout)
            x = read_points(msg, field_names=self.fields, skip_nans=True)
            x = np.array(list(x))
            # TODO: Fix conversion (lookup).
            # tf = self.tf.lookup_transform_full(self.box_frame, msg.header.stamp,
            #                                    msg.header.frame_id, msg.header.stamp,
            #                                    self.fixed_frame, self.tf_timeout)
            # R, t = se3_from_tf(tf)
            # rospy.loginfo('%s to %s R:\n%s', msg.header.frame_id, self.box_frame, R)
            # rospy.loginfo('%s to %s t:\n%s', msg.header.frame_id, self.box_frame, t)
            # x = np.dot(x, R.T) + t.T
            n0 = x.shape[0]
            x = filter_box(x, self.min, self.max)
            n1 = x.shape[0]
            out = create_cloud_xyz32(msg.header, x)
            out = self.tf.transform_full(out, self.target_frame, stamp, self.fixed_frame, self.tf_timeout)
            # rospy.loginfo(msg.header.stamp)
            # rospy.loginfo(out.header.stamp)
            out.header.stamp = stamp

            # tf = self.tf.lookup_transform_full(self.target_frame, msg.header.stamp,
            #                                    self.box_frame, msg.header.stamp,
            #                                    self.fixed_frame, self.tf_timeout)
            # R, t = se3_from_tf(tf)
            # rospy.loginfo('%s to %s R:\n%s', self.box_frame, self.target_frame, R)
            # rospy.loginfo('%s to %s t:\n%s', self.box_frame, self.target_frame, t)
            # x = np.dot(x, R.T) + t.T
            # header = copy(msg.header)
            # header.frame_id = self.target_frame
            # out = create_cloud_xyz32(header, x)
            self.cloud_pub.publish(out)
            rospy.loginfo('Cloud filtered: %i points from %i kept (%.3f s).', n1, n0, timer() - t0)
        except TransformException as ex:
            rospy.logerr(ex.message)


if __name__ == '__main__':
    node = BoxFilterNode()
    rospy.spin()
