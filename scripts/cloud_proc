#!/usr/bin/env python
"""
Point cloud processor / filter chain.
"""
from __future__ import absolute_import, division, print_function
from cloud_proc import configure_filters, FilterChain
import rospy
from ros_numpy import msgify, numpify
from sensor_msgs.msg import PointCloud2
from timeit import default_timer as timer


class CloudProcNode(object):

    class SubListener(rospy.SubscribeListener):

        def __init__(self, node):
            assert isinstance(node, CloudProcNode)
            self._node = node

        def peer_subscribe(self, topic_name, topic_publish, peer_publish):
            self._node.subscribe()

        def peer_unsubscribe(self, topic_name, num_peers):
            if num_peers == 0:
                self._node.unsubscribe()

    def __init__(self):
        self.chain = FilterChain(configure_filters(rospy.get_param('~filters', [])))
        out_queue_size = rospy.get_param('~out_queue_size', 5)
        in_queue_size = rospy.get_param('~in_queue_size', 5)
        in_buff_size = rospy.get_param('~in_buff_size', 65536)
        lazy_subscription = rospy.get_param('~lazy_subscription', False)
        pub_kw = {}
        if out_queue_size > 0:
            pub_kw['queue_size'] = out_queue_size
        self.sub_kw = {}
        if in_queue_size > 0:
            self.sub_kw['queue_size'] = in_queue_size
        if in_buff_size > 0:
            self.sub_kw['buff_size'] = in_buff_size
        self.overwrite_in_frame = rospy.get_param('~overwrite_in_frame', None)
        self.sub_listener = CloudProcNode.SubListener(self) if lazy_subscription else None
        self.cloud_pub = rospy.Publisher('out', PointCloud2, subscriber_listener=self.sub_listener, **pub_kw)
        self.cloud_sub = None
        if not lazy_subscription:
            self.subscribe()

    def subscribe(self):
        if self.cloud_sub is None:
            self.cloud_sub = rospy.Subscriber('in', PointCloud2, self.cloud_cb, **self.sub_kw)
            rospy.loginfo("Subscribed to " + rospy.resolve_name('in'))

    def unsubscribe(self):
        if self.cloud_sub is not None:
            rospy.loginfo("Unsubscribing from " + rospy.resolve_name('in'))
            self.cloud_sub.unregister()
            self.cloud_sub = None

    def cloud_cb(self, msg):
        t0 = timer()
        # Create a copy which can be modified in-place.
        cloud = numpify(msg).copy()
        header = msg.header
        if self.overwrite_in_frame is not None:
            header.frame_id = self.overwrite_in_frame
        cloud, header = self.chain.filter(cloud, header)
        if cloud is not None:
            msg = msgify(PointCloud2, cloud)
            msg.header = header
            self.cloud_pub.publish(msg)
        rospy.loginfo('Cloud processed (%.3f s).' % (timer() - t0))


if __name__ == '__main__':
    rospy.init_node('cloud_proc')
    node = CloudProcNode()
    rospy.spin()
