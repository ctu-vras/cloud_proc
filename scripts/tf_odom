#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
from geometry_msgs.msg import Pose, PoseStamped
from nav_msgs.msg import Odometry
import roslib
from roslib.message import get_message_class
import rospy
from tf2_client import get_buffer
from tf2_py import TransformException


def deserialize(msg):
    msg_name = msg._connection_header['type']
    msg_class = get_message_class(msg_name)
    msg = msg_class().deserialize(msg._buff)
    return msg


def slots(msg):
    return [getattr(msg, var) for var in msg.__slots__]


class TfToOdomNode(object):

    def __init__(self):
        rospy.init_node('tf_odom')
        self.parent_frame = rospy.get_param('~parent_frame', 'map')
        rospy.loginfo('Parent frame: %s', self.parent_frame)
        self.child_frame = rospy.get_param('~child_frame', 'base_link')
        rospy.loginfo('Child frame: %s', self.child_frame)
        self.timeout = rospy.Duration(rospy.get_param('~timeout', 0.0))
        rospy.loginfo('Timeout: %s s', self.timeout.to_sec())
        self.timer_freq = rospy.get_param('~timer_freq', None)
        rospy.loginfo('Timer frequency: %s Hz', self.timer_freq)
        self.no_wait = rospy.get_param('~no_wait', False)
        rospy.loginfo('Don\'t wait for transform (take last): %i', self.no_wait)

        self.pose_pub = rospy.Publisher('pose', PoseStamped, queue_size=2)
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=2)

        self.tf = get_buffer()
        self.trigger_sub = rospy.Subscriber('trigger', rospy.AnyMsg, self.trigger_cb, queue_size=2)
        if self.timer_freq:
            self.timer = rospy.Timer(rospy.Duration(self.timer_freq), self.timer_cb)

    def lookup_pose(self, stamp):
        if self.no_wait:
            stamp = rospy.Time(0, 0)
        tf = self.tf.lookup_transform(self.parent_frame, self.child_frame, stamp, self.timeout)
        rospy.logdebug('%s position in %s: (%.3f, %.3f, %.3f)',
                       self.child_frame, self.parent_frame, *slots(tf.transform.translation))
        pose = Pose()
        pose.orientation = tf.transform.rotation
        pose.position = tf.transform.translation
        return pose

    def publish_msgs(self, stamp):
        try:
            pose = self.lookup_pose(stamp)

            pose_stamped = PoseStamped()
            pose_stamped.header.frame_id = self.parent_frame
            pose_stamped.header.stamp = stamp
            pose_stamped.pose = pose
            self.pose_pub.publish(pose_stamped)

            odom = Odometry()
            odom.header.frame_id = self.parent_frame
            odom.header.stamp = stamp
            odom.child_frame_id = self.child_frame
            odom.pose.pose = pose
            self.odom_pub.publish(odom)
        except TransformException as ex:
            rospy.logerr(ex.message)

    def trigger_cb(self, msg):
        msg = deserialize(msg)
        self.publish_msgs(msg.header.stamp)

    def timer_cb(self, event):
        self.publish_msgs(event.current_real)


if __name__ == '__main__':
    node = TfToOdomNode()
    rospy.spin()
